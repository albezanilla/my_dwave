# The solve.pickle file is generated by solve.py - see the comment at
# the top of that file for an explanation of its format.  This program
# reads in the solve.pickle file, modifies the data structure
# containing the puzzle solutions, and writes it back out to another
# pickle file named qubo_answers.pickle.  The modification is to
# extend the set of key values in each dict to include the auxiliary
# variables.  There are 16 auxiliary variables and their names are of
# this form:
#              {A|B|C|D|u|d|f|b}_aux_{0|1|2|3}
#
# The first portion of the string name corresponds to one of the eight
# subproblems.  Not all subproblems require all four auxiliary
# variables.

import pickle
import ii
import validate
from sympy import symbols
import sys

usage_message = 'Usage: qubo_answers.py'

filename = 'solve.pickle'

qubos = {'cube1', 'cube2', 'cube3', 'cube4', 'up', 'down', 'front', 'back'}

# Read in the eight solutions from the pickle file generated by
# solve.py:

try:
    with open(filename, 'rb') as f:
        answers = pickle.load(f)
except FileNotFoundError:
    print('error: file "%s" does not exist' % filename)
    sys.exit(1)

logical_vars = dict()
valid_states = dict()
aux_var_values = dict()

# Read in the eight subproblems:

for subqubo in qubos:
    if subqubo[0:4] == 'cube':
        cube_num = int(subqubo[4])
        logical_vars[subqubo], valid_states[subqubo] = ii.cube_configurations(cube_num)
    else:
        logical_vars[subqubo], valid_states[subqubo] = ii.face_configurations(subqubo[0])

    if subqubo == 'cube3':
        method = '.deqo'
    else:
        method = '.ocean'

    filename = subqubo + method + '.pickle'
    
    try:
        with open(filename, 'rb') as f:
            qubo = pickle.load(f)
    except FileNotFoundError:
        print('error: file "%s" does not exist' % filename)
        sys.exit(1)

    # For each subproblem, invoke the validate.spectrum() method.
    # This returns the setting of auxiliary variables for each of the
    # valid states for the subproblem:
    
    logical_syms = tuple(symbols(logical_vars[subqubo]))
    valid_states_hist, _ = validate.spectrum(logical_syms, valid_states[subqubo], qubo)

    aux_var_values[subqubo] = {vstate: pair[1] for vstate, pair in valid_states_hist.items()}

# Loop through the eight answers.  For each answer, retrieve the
# values of the auxiliary variables and add those key/value pairs
# into the dict for the answer.

for answer in answers:
    for subqubo in qubos:
        for state in valid_states[subqubo]:
            if all([answer[var] == state[i] for i, var in enumerate(logical_vars[subqubo])]):
                aux_vars = aux_var_values[subqubo][state]
                for aux_sym, value in aux_vars:
                    answer[aux_sym.name] = value

# Write out the data structure, now extended with the values of the
# auxiliary variables:

filename = 'qubo_answers.pickle'
with open(filename, 'wb') as f:
    pickle.dump(answers, f, pickle.HIGHEST_PROTOCOL)
